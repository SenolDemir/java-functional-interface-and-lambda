
java.util.function.

    IntPredicate            Always accepts int as input
    boolean test(int value);

    DoublePredicate         Always accepts double as input
    boolean test(double value);

    LongPredicate           Always accepts long as input
    boolean test(long value);


    IntFunction <R>         Always accepts int as input and return any type as output
    R apply(int value);

    LongFunction <R>        Always accepts long as input and return any type as output
    R apply(long value);

    ToIntFunction <T>       Always return int value but accepts any type as input
    int applyAsInt (T value);

    ToDoubleFunction <T>    Always return double value but accepts any type as input
    double applyAsDouble (T value);

    ToLongFunction <T>      Always return long value but accepts any type as input
    long applyAsLong (T value);

    IntToLongFunction       Always takes int type as input and return long as return type
    long applyAsLong (int value);

    IntToDoubleFunction     Always takes int type as input and return double as return type
    double applyAsDouble (int value);

    LongToIntFunction       Always takes long type as input and return int as return type
    int applyAsInt (long value);

    LongToDoubleFunction    Always takes long type as input and return double as return type
    double applyAsDouble (long value);

    DoubleToIntFunction     Always takes double as input and return int as return type
    int applyAsInt (double value);

    DoubleToLongFunction    Always takes double type as input and return long as return type
    long applyAsLong (double value);

    ToIntBiFunction         Always takes 2 input parameters of any type and return int as return type
    int applyAsInt (T t, U u);

    ToLongBiFunction        Always takes 2 input parameters of any type and return long as return type
    long applyAsLong (T t, U u);

    ToDoubleBiFunction      Always takes 2 input parameters of any type and return double as return type
    double applyAsDouble (T t, U u);

    
    IntConsumer             Always accepts int value as input
    void accept(int value);

    LongConsumer            Always accepts long value as input
    void accept(long value);

    DoubleConsumer          Always accepts double value as input
    void accept(double value);

    ObjIntConsumer <T>      Always accepts 2 inputs of type int and any data type
    void accept(T t, int value);

    ObjLongConsumer <T>     Always accepts 2 inputs of type long and any data type
    void accept(T t, long value);

    ObjDoubleConsumer <T>   Always accepts 2 inputs of type double and any data type
    void accept(T t, double value);

    
    IntSupplier             Always return int value as output
    int getAsInt();

    LongSupplier            Always return long value as output
    long getAsLong();

    DoubleSupplier          Always return double value as output
    double getAsDouble();

    BooleanSupplier         Always return boolean value as output
    boolean getAsBoolean();

    
    IntUnaryOperator        Always accept and return int values
    int applyAsInt (int operand);

    LongUnaryOperator       Always accept and return long values
    long applyAsLong (long operand);

    DoubleUnaryOperator     Always accept and return double values
    double applyAsDouble (double operand);

    IntBinaryOperator       Always accept 2 input parameters and return in int values
    int applyAsInt (int left, int right);

    LongBinaryOperator      Always accept 2 input parameters and return in long values
    long applyAsLong (long left, long right);

    DoubleBinaryOperator    Always accept 2 input parameters and return in double values
    double applyAsDouble (double left, double right);
